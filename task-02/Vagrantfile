# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
	config.vm.box = "debian/buster64"


#	config.vm.network "forwarded_port", guest: 8080, host: 8080, host_ip: "127.0.0.1"
#	config.vm.network "forwarded_port", guest: 8081, host: 8081, host_ip: "127.0.0.1"
#	config.vm.network "private_network", ip: "192.168.33.10"

#	config.vm.provision "shell", inline: <<-SHELL
#		echo "Делаем папки"
#		sudo mkdir /home/vagrant/.config
#		sudo mkdir /home/vagrant/.config/lxc1
#		sudo mkdir /home/vagrant/.config/lxc2
#		sudo mkdir /home/vagrant/itacademy
#	SHELL
	
	config.vm.provision :file, source: '../itacademy', destination:  "/home/vagrant/"
	
#	config.vm.provision "shell", inline: <<-SHELL
#		sudo mkdir "/var/lib/lxc/container8080/rootfs/var/www/01-demosite-static"
#		sudo cp /home/vagrant/itacademy/01-demosite-static/* /var/lib/lxc/container8080/rootfs/var/www/01-demosite-static/
#	SHELL
	
	config.vm.provision "shell", inline: <<-SHELL
	
		echo "Операции с Grub"
		
		sudo apt remove gnupg
		sudo apt install --reinstall gnupg2
		sudo apt install dirmngr
	 
		sudo apt-get install lxc lxc-templates -y
		sudo systemctl enable lxc
		sudo systemctl start lxc
	SHELL

	config.vm.provision "shell", inline: <<-SHELL
		echo "Добавляем id"
#		echo "lxc.net.0.type = veth
#			lxc.net.0.flags = up
#			lxc.net.0.link  = lxcbr0
#			lxc.apparmor.profile = unconfined
#			lxc.apparmor.allow_nesting = 1
#			lxc.idmap = u 0 100000 65536
#			lxc.idmap = g 0 100000 65536" > /home/vagrant/.config/lxc1/default.conf
#		echo "lxc.net.0.type = veth
#			lxc.net.0.flags = up
#			lxc.net.0.link  = lxcbr0
#			lxc.apparmor.profile = unconfined
#			lxc.apparmor.allow_nesting = 1
#			lxc.idmap = u 0 100000 65536
#			lxc.idmap = g 0 100000 65536" > /home/vagrant/.config/lxc2/default.conf
		echo "lxc.net.0.type = veth
			lxc.net.0.flags = up
			lxc.net.0.link  = lxcbr0" >> /etc/lxc/default.conf
	SHELL


	config.vm.provision "shell", inline: <<-SHELL
		echo "Kernel operations"
		echo "kernel.unprivileged_userns_clone = 1" >> /etc/sysctl.conf
	SHELL

	config.vm.provision "shell", inline: <<-SHELL
		echo "Grub updates"
		sudo update-grub2
		sudo update-grub
	 
		#sudo reboot
	SHELL

	config.vm.provision "shell", inline: <<-SHELL
		echo "LXC-net"
		
		echo "vagrant veth lxcbr0 10" > /etc/lxc/lxc-usernet
		echo "USE_LXC_BRIDGE="true"
				LXC_BRIDGE="lxcbr0"
				LXC_ADDR="10.0.3.1"
				LXC_NETMASK="255.255.255.0"
				LXC_NETWORK="10.0.3.0/24"
				LXC_DHCP_RANGE="10.0.3.2,10.0.3.254"
				LXC_DHCP_MAX="253"
				LXC_DHCP_CONFILE=""
				LXC_DOMAIN=""" >  /etc/default/lxc-net		
		systemctl enable lxc-net
		systemctl start lxc-net
		systemctl restart lxc-net
	SHELL
	
	config.vm.provision "shell", inline: <<-SHELL
		echo "LXC1"
#		cd /home/vagrant/.config/lxc1/
		sudo lxc-create -n container8080 -t download -- --dist centos --release 8 --arch amd64
		
		sudo lxc-start container8080
			
		sudo lxc-attach container8080
			yum install httpd php -y
			systemctl enable httpd
			systemctl start httpd
			setenforce 0
			echo "SELINUX=disabled" > /etc/selinux/config
			echo "IncludeOptional sites-enabled/*.conf" >> /etc/httpd/conf/httpd.conf
			echo "Listen 8080" >> /etc/httpd/conf/httpd.conf
		exit
			
		sudo mkdir /var/lib/lxc/container8080/rootfs/var/www/01-demosite-static
		sudo cp /home/vagrant/itacademy/01-demosite-static/* /var/lib/lxc/container8080/rootfs/var/www/01-demosite-static/
		sudo mkdir /var/lib/lxc/container8080/rootfs/etc/httpd/sites-available /var/lib/lxc/container8080/rootfs/etc/httpd/sites-enabled
		sudo cp /home/vagrant/itacademy/hometask2_1.conf /var/lib/lxc/container8080/rootfs/etc/httpd/sites-available/
		sudo ln -s /var/lib/lxc/container8080/rootfs/etc/httpd/sites-available/hometask2_1.conf /var/lib/lxc/container8080/rootfs/etc/httpd/sites-enabled/hometask2_1.conf
		
		sudo lxc-attach container8080
			
			chmod 775 /var/www/01-demosite-static/
			chown -R apache:apache /var/www/01-demosite-static/
			
#			echo "# Virtual Hosts
#				<VirtualHost *:8080>
#				ServerAdmin root@localhost
#				DocumentRoot "/var/www/01-demosite-static/"
#				ServerName 127.0.0.1
#				<Directory /var/www/01-demosite-static>
#					Options FollowSymLinks
#					AllowOverride All
#					Require all granted
#				</Directory>
#				ErrorLog "/var/log/httpd/01-demosite-static-error_log"
#				CustomLog "/var/log/httpd/01-demosite-static-access_log" common
#				</VirtualHost>" > /etc/httpd/conf/httpd.conf
		exit
	SHELL

	config.vm.provision "shell", inline: <<-SHELL
		echo "LXC2"
#		cd /home/vagrant/.config/lxc2/
		sudo lxc-create -n container8081 -t download -- --dist centos --release 8 --arch amd64
	SHELL

#sudo lxc-start container8081

#centos  8       amd64









  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
